public class DataTypeEx01 {
	public static void main(String[] args) {
		
	}
}

/*
 * 데이터 타입(Data Type)
 * 	1) 기본 타입
 * 		- 변수값에 메모리 공간과 할당된 공간 이름 및 실제값까지 Stack 영역에서 바로 저장
 * 		- byte, char, int, long
 * 		- float, double
 * 		- boolean
 * 		
 * 
 * 	2) 참조 타입
 * 		- 변수값에 메모리 공간과 할당된 공간의 이름은 Stack 영역에서 바로 저장되지만
 * 			실제값은 Heap 영역에 존재
 * 			따라서, 참조 타입의 변수값은 Heap 영역에 있는 실제값이 있는 주소값을 빌려오는 것
 * 		- 배열 타입
 * 		- 열거 타입
 * 		- 클래스
 * 		- 인터페이스
 * 
 * Stack
 *  - 엄격하게 후임선출(LIFO) 방식으로 운영
 * 	- LIFO (Last In First Out)
 * 		- 입력(push)로 들어간 데이터가 밑바닥부터 차곡차곡 쌓아서 들어감
 * 		- 출력(pop)할 때, 제일 위에 저장된 데이터부터 순차적으로 나옴
 * 	+ 작동 원리
 * 	ex) data = {3, 5, 7, 9}
 * 	push(3) : 3이 제일 밑바닥에 저장
 * 	push(5) : 3이 저장된 메모리의 다음 공간에 저장
 * 	push(7) : 5가 저장된 메모리의 다음 공간에 저장
 * 	push(9) : 7이 저장된 메모리의 다음 공간에 저장
 * 
 * 	pop() = 9 : 제일 최근에 저장된 메모리 공간에 할당된 데이터가 출력됨
 *  pop() = 7 : 9가 산출되고 남은 메모리 공간 중 제일 최근에 저장된 데이터가 7이기 때문에 7이 출력
 *  pop() = 5 : 7이 산출되고 남은 메모리 공간 중 제일 최근에 저장된 데이터가 5이기 때문에 5가 출력
 *  
 *  push(11) : 3이 저장된 메모리의 다음 공간에 저장
 *  pop() = 11 : 
 *  	5가 산출되고 남은 메모리 공간 중 제일 최근에 11이 저장되었기 때문에
 *  	가장 최근에 저장된 데이터는 11
 *  	따라서, 가장 최근에 저장된 데이터인 11이 출력
 *  
 *  
 *  Heap
 *   - 프로그램들이 요구하는 블록의 크기나 요구/횟수 순서가 일정한 규칙이 없다
 *   - new : heap 영역의 메모리를 요청하고 있다
 *   
 *   ex)
 *   int value = 4 : 변수 value에 4라는 변수값을 대입
 *   String name = "KSJ" : 변수 name에 주소값으로 "KSJ"를 할당
 *   
 *   
 *  String 타입
 *  - 참조 타입 중 하나
 		- 형식: String 변수 = "문자열";
 		+ 원래 형식: String name1 = new String("Java");
 			- String 타입만 예외로, String name1 = "Java";
 * 
 */

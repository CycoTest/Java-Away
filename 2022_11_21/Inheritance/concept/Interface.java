package concept;

public class Interface {

}
/*
 * 인터페이스(Interface)
 * 	- 객체의 사용 방법을 정의한 타입
 * 	- 개발 코드와 객체가 서로 통신하는 접점 역할
 * 
 * 	- 추상 클래스/메소드 때와 달리 abstract이 안 붙지만, 
 * 		실체가 없다
 * 	- 실체화 하려면, 자식 클래스를 만들고, 
 * 		상속의 개념인 extends 대신
 * 		실체화의 개념인 implements 를 붙인다
 * 
 * 	형식:
 * 	public interface InterfaceName {
 *		// 상수
 *		타입 상수명 = 값;
 *		// 추상 메소드
 *		타입 메소드명(매개변수, ...);
 *		// 디폴트 메소드
 *		default 타입 메소드(매개변수, ...) {...}
 *		// 정적 메소드
 *		static 타입 메소드명(매개변수) {...}
 * 
 *  1) 인터페이스와 추상 클래스의 차이
 *  	- 추상 클래스: 
 *  	-> 추상 클래스를 상속받아서 기능을 이용하고, 확장시키기 위해
 *  	
 *  	- 인터페이스:
 *  	-> 함수의 구현을 강제함으로써 구현 객체의 같은 동작을 보장
 *  
 *  	ex) ex03_Interface01
 * 
 *  2) 익명 구현 객체
 *  	- 구현 클래스를 만들어 사용하는 것이 일반적이고,
 *  		클래스를 재사용할 수 있기 때문에 편리하지만,
 *  		
 *  		일회성의 구현 객체를 만들기 위해 소스 파일을 
 *  		만들고 클래스를 선언하는 것은 비효율적이다.
 *  
 *  		따라서, 소스 파일을 만들지 않고도
 *  		구현 객체를 만들 수 있는 방법을 제공
 *  
 *  	형식:
 *  	인터페이스 변수 = new 인터페이스() {
 *  		// 인터페이스에 선언된 추상 메소드의 실체 메소드 선언
 *  	}
 *  	
 *  	ex) ex04_Interface02
 *  
 *  3) 다중 인터페이스 구현 클래스
 *  	- 원래 자바에서는
 *  		클래스로는 다중 상속이 허용되지 않지만, 
 *  		인터페이스로 하면 다중 상속이 허용된다	
 *  	
 *  	형식:
 *  	public class ClassName implements Interface1, Interface2 {
 *  	// Interface1에 선언된 추상 메소드의 실체 메소드 선언
 *  	// Interface2에 선언된 추상 메소드의 실체 메소드 선언
 *  	}
 *  
 *  	ex) ex05_muitiple_interface
 *  
 *  4) 타입 변환과 다형성 (p.247)
 *  	-
 *  
 *  
 */

package object_oriented;

public class Objected_Oriented {
	public static void main(String[] args) {
		
	}
}
/*
 * + 절차 지향 프로그래밍
 * 	- 순차적인 처리
 * 	- 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법
 * 	- 컴퓨터의 작업 처리 방식과 유사하기 때문에 시간적으로 유리
 * 	ex) C, Pascal, BASIC, etc.
 * ====================================================
 * + 객체 지향 프로그래밍
 * 	- 절차 지향 프로그래밍이 크고 복잡한 프로그램을
 * 		구축/유지 보수하기 어렵다는 문제점을 해결하기 위한 프로그래밍 개념
 * 
 * 	- 객체(Object)
 * 		- 실체(데이터) : 클래스 멤버 변수, 필드
 * 		- 실체와 관련된 동작(절차, 방법, 기능)
 * 			관련된 동작(=메소드)를 이용하기 위해 객체 내부에 접근하기 위해서
 * 			객체명 바로 뒤에 점(.)을 붙임
 * 				단, 점(.)은 직접 접근하는 연산자
 * 
 * 	- 모든 데이터를 Object로 취급
 * 
 * 
 * + class : member variable + method
 * 
 * 클래스 다이어그램
 * 
 * Animal : 클래스 이름
 * +name : String -> 속성 (name 앞에 '+'가 붙으면 public, '-'가 붙으면 private)
 * +age : int     -> 속성
 * 				  -> 메서드
 * 	
 * class Animal {
 * 		String name;
 * 		int age;
 * }
 * 
 * + UML = 설계도 같은 것
 * 
 * class = 붕어빵 틀, 객체 = 붕어빵
 *	- 클래스는 동일한 모양의 객체를 여러 개 만들어 내기 위한 틀이기에
 * 		객체가 생성되어야만 실질적인 데이터를 저장할 수 있는 기억공간이 
 * 		메모리에 할당됨. 이러한 객체를 인스턴스(instance), 실체라고도 함
 * 	- new int[10]; 
 * 		new: heap 영역에 메모리를 할당받아서 
 * 
 * 객체 모델링(Object Modeling)
 * 	- 현실 세계의 객체를 소프트웨어 객체로 설계
 * 	- 현실 세계의 객체의 속성과 동작을 추려내 소프트웨어 객체의 필드와 메소드로 정의하는 과정
 * 
 * 객체 지향 프로그래밍의 특징
 * 	1) 캡슐화(Encapsulation)
 * 		: 여러 가지의 Java의 기본 타입들을 하나의 class로 묶어서 담는 것
 * 			ex) 클래스 다이어그램
 * 	
 * 	- 정보 은닉(Information Hiding)
 * 		객체 외부 class에서 해당 객체의 내부 class의 멤버 변수를 접근할 수 없지만,
 * 		같은 내부 class 내에선 자유로운 접근이 가능하게 해주는 것
 * 			+ 외부란? 다른 클래스를 일컬음
 * 			private / public 
 * 		하는 이유:
 * 			-> 정보의 무결성을 위해, 타인이 수정하는 것을 막기 위함
 * 
 * 	2) 상속(Inheritance)
 * 
 * 	3) 다형성(Polymorphism)
 * 
 * 
 * 
 * + 변수(Variable)
 * 	1) 멤버 변수(member variable)
 * 		: 멤버 변수의 선언 위치는 '클래스 영역'
 * 
 * 		- 클래스 변수
 * 		-> 모든 객체가 공통적으로 똑같은 속성을 가질 때
 * 
 * 		- 인스턴스 변수
 * 		-> 각각의 객체(=인스턴스)마다 개별적인 속성을 가져야 할 때
 * 
 * 	2) 지역 변수(local variable)
 * 		: 지역 변수의 선언 위치는 '메소드나 생성자 내부'
 * 		-> 메소드 내에 선언되어 메소드 내에서만 사용이 가능한 변수를 말하며
 * 			메소드가 종료되거나 그 범위를 벗어나면 자동으로 소멸됨
 * 
 * + Package
 * 	- 물리적인 형태는 파일시스템의 폴더
 * 	- 클래스를 유일하게 만들어주는 식별자 역할
 * 	- 클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식
 * 	- 클래스의 전체 이름: "패키지명 + 클래스명"
 * 
 *  + 접근 지정자/제한자 : 자신의 클래스 / 같은 패키지 / 하위 클래스 / 다른 패키지
 * 		- private : 가능 / 불가능 / 불가능 / 불가능
 * 		- 생략(기본 접근 지정자) : 가능 / 가능 / 불가능 / 불가능
 * 		- protected : 가능 / 가능 / 가능 / 불가능
 * 		- public : 가능 / 가능 / 가능 / 가능
 * 
 * 	+ 생성자 (Constructor)
 * 	- 인스턴스(instance) 생성 시, 자동으로 호출되는 method
 * 		-> 'new', heap 영역에 메모리 공간을 할당받을 때, 자동으로 호출되는 method
 * 	- 클래스 이름과 동일
 * 	- method의 return형을 기술하지 않음
 * 	- 주로 멤버 변수를 초기화 하는 데 사용됨
 * 
 * 	+ Method (=funtion)
 * 	- 
 * 
 */
